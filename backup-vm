#!/bin/bash

VERSION=0.1
CONFIG=/etc/kvm-backup.conf
SCRIPT=$(basename "$0")

function usage {
        echo "Usage: ${SCRIPT} [-t|-c|-h|-v] -n" 2>&1
        echo '   -n    virtual machine name'
        echo '   -t    time in seconds to wait virtual machine shutdown'
        echo '   -c    configuration file path'
        echo '   -h    shows this help and exit'
        echo '   -v    shows version and exit'
        exit 1
}

if [[ ${#} -eq 0 ]]; then
   usage
fi

# Define list of arguments expected in the input
optstring=":n:t:c:hv"

while getopts ${optstring} arg; do
  case "${arg}" in
    n) vm="${OPTARG}" ;;
    t) TIME_SHUTDOWN=${OPTARG} ;;
    c) CONFIG=${OPTARG} ;;
    h) usage ;;
    v) echo "Version: ${VERSION}"
       exit 0 
       ;;
    \?)
      echo "Invalid option: -${OPTARG}."
      echo
      usage
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

function log_message {
  if [ "$1" = "error" ]; then
    logger -t "${SCRIPT}" -p "local3.err" "$2" 
  elif [ "$1" = "info" ]; then
    logger -t "${SCRIPT}" -p "local3.info" "$2"
  fi
}

function get_qemu_version {
    rpm_bin=$(/usr/bin/which rpm)
    qemu_version=$(${rpm_bin} -q qemu-img |cut -d"-" -f3|cut -d"." -f1)

    if [ "${qemu_version}" -ge 3 ]; then
        qemu_options="-WcO qcow2"
        log_message "info" "qemu version ${qemu_version} or higher detected"
        log_message "info" "using options ${qemu_options}"
    else
        qemu_options="-cO qcow2"
        log_message "info" "qemu version ${qemu_version} or lower detected"
        log_message "info" "using options ${qemu_options}"
    fi
}

function check_vm_exists {
  if ! virsh list --all | grep -q "${vm}"; then
      log_message "error" "virtual machine ${vm} not found"
      exit 1
  else
    log_message "info" "virtual machine ${vm} found"
  fi
}

function load_config {
  if [ ! -f "${CONFIG}" ];
  then
    echo "Configuration file doesn't exits"
    log_message "error" "Configuration file doesn't exits ${CONFIG}"
    exit 2
  fi
  log_message "info" "Loading configuration file ${CONFIG}"
  # shellcheck source=/dev/null
  source "${CONFIG}"
}

function prepare_dirs {
  timestamp=$(date +%Y%m%d%H%M%S)
  if [ ! -d "${NFSEXPORT}/${vm}-${timestamp}" ]; then
    log_message "info" "Creating backup directory ${NFSEXPORT}/${vm}-${timestamp}"
    mkdir -p "${NFSEXPORT}/${vm}-${timestamp}"
    if [ $? -ne 0 ]; then
      log_message "error" "Error creating backup directory ${NFSEXPORT}/${vm}-${timestamp}"
      exit 3
    fi
  fi
}

function make_config_backup {
  log_message "info" "Creating configuration backup in ${NFSEXPORT}/${vm}-${timestamp}/${vm}.xml"
  virsh dumpxml "${vm}" > "${NFSEXPORT}/${vm}-${timestamp}/${vm}.xml"
  vm_definition_file="${NFSEXPORT}/${vm}-${timestamp}/${vm}.xml"
  if [ $? -ne 0 ]; then
    log_message "error" "Error creating configuration backup in ${NFSEXPORT}/${vm}-${timestamp}/${vm}.xml"
    exit 4
  fi
}

function get_disks {
  log_message "info" "Getting disks"
  disks=$(virsh domblklist --details ${vm}|awk '/dev/ {print $4}' | xargs)
  log_message "info" "Disks: ${disks} found for vm ${vm}"
  if [ $? -ne 0 ]; then
    log_message "error" "Error getting disks"
    exit 5
  fi
}

function get_vgs {
  log_message "info" "Getting volumes groups"
  for disk in ${disks}; do
    vg=$(lvdisplay -v ${disk} 2>/dev/null|awk '/VG/ {print $3}' |xargs)
    log_message "info" "Volume group ${vg} found for disk ${disk}"
    if [ $? -ne 0 ]; then
      log_message "error" "Error getting volume group"
      exit 6
    fi
  done
}

# Main Script
load_config
get_qemu_version
check_vm_exists
prepare_dirs
make_config_backup
get_disks
get_vgs
determine_free_space